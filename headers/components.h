#ifndef COMPONENTS_H
#define COMPONENTS_H
#include <iostream>
#include "../headers/driver_input.h"
#include "../headers/vehicle.h"
using namespace std;

class EV;

class Battery{

    private:
        float Q_max; //Q stands for "Charge." This variable represents the max amount of charge Max capacity in Ampere-hours
        float Q_now; //The current amount of charge that the battery contains
        float V_max; //The maximum voltage output/input of the battery
        float R_internal; //Internal resistance
        float voltage;
        float current; //The electrical current being provided by or to the battery
        float stateOfHealth; //The battery has a "state of health," of how "healthy" it is at a given time
        float temperature; //Tempearture of the battery which varies with usage
        float heatCapacity; //Thermal mass of battery in J/°C
        float heatTransferCoeff; //To environment W/°C
        float totalTimeSeconds; //Total session time in seconds
        float totalDistanceKm; //Total distance traveled in kilometers

    public:
        
        Battery();
        Battery(float Q_max){
            this->Q_max = Q_max;
            this->Q_now = Q_max;
                this->V_max = V_max;
    this->R_internal = R_internal;
    this->stateOfHealth = stateOfHealth; 
    this->voltage = 0.9 * V_max; //nominal voltage is about 90% of the max voltage 
    this->current = 0; 
    this->heatCapacity = heatCapacity;
    this->heatTransferCoeff = 0.6; 
    this->temperature = 25; 
    this->totalTimeSeconds = 0;     
    this->totalDistanceKm = 0; 


        }
        Battery(float Q_max, float V_max, float R_internal, float heatCapacity, float stateOfHealth);
        virtual ~Battery() {}
        void set_Q_max(float Q);
        void set_Q_current(float Q);
        void set_V_max(float V);
        void set_R_internal(float R);
        void set_SOH(float SOH);
        void set_temp(float T);

        float get_SOC();
        float get_Q_max();
        float get_Q_current();
        float get_V_max();
        float get_R_internal();
        float get_SOH();
        float get_temp();

        void setCurrent(float I);
        void rechargeFromRegen(float deltaQ);

        void discharge(float speed, float delta_t);

        void charge(float V_applied, float time, bool &fullCharge);

        float updateTemperature(float delta_t, float ambientTemp);

        void degradeSOH(float delta_t);

        void degradeWithCycle(float deltaQ);


};


class Motor {
private:
    float current; //Electrical current flowing through motor
    float speed; //Speed of the vehicle in km/h
    float powerRating; //Power rating in kilowatts (kW)
    float R_internal; //Internal resistance of the motor
    float maxCurrent; //Max current the motor can draw in Amps
    float efficiency; //Efficiency of the motor (between 0 and 1)
    float maxSpeed; // Maximum motor speed (RPM)
    float maxTorque = 200; //Maximum torque the motor can deliver in Newton-meters
    float maxBrakeTorque = 300; //Maximum torque generated by braking in Newton-meters
    float inertia = 10; //Rotational inertia of the motor (kg * m^2)
    float regenEfficiency = 0.5; // Efficiency factor for regenerative braking (0 to 1)
    float maxRegenPower = 100;   // Maximum power that can be recovered through regen braking (Watts)
    float heatTransferCoeff = 1.2; // Heat transfer coefficient for motor cooling (W/°C)
    float temperature;       // Current temperature of the motor (°C)
    float heatCapacity = 12; // Thermal capacity of motor, heat needed to raise temp by 1°C (J/°C)


public:
    Motor();

    Motor(float maxTorque, float maxBrakeTorque, float inertia, float regenEfficiency);
    Motor(float maxTorque){
        this->maxTorque = maxTorque;
    }
    bool isRegenerating(DriverInput& input);

    void setMaxRegenPower(float power);

    float getMaxRegenPower() const;

    float updateSpeed(DriverInput& driverInput, EV &vehicle, Battery &battery, float deltaTime);
    void applyRegenerativeBraking(DriverInput &input, EV &vehicle, Battery& battery, float deltaTime);
    float calculateRegenPower(DriverInput &input, EV &vehicle);
    float updateTemperature(float delta_t, float ambientTemp);



};

class Charger{

    private:
        bool isCharging; //to track state
        float maxPowerOutput;
        float efficiency;


    public:

    void startCharging(Battery* battery);
    void stopCharging(Battery* battery);
};

#endif